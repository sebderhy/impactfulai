{
  
    
        "post0": {
            "title": "Risk Management",
            "content": ". One of the most important principles of the Lean Startup methodology is “fail fast”. No one wants to fail, but failing rapidly makes it less painful, and more importantly, leaves more time and resources to try something new until success. . Since AI projects share this characteristic that most of them will fail, we need to carefully design our AI development methodology in order to remove the biggest failure risks as soon as possible: in other words, we need to quickly know when things are not going to work, and change direction when it’s the case. . But of course, this is not as easy as it sounds. Exactly like in startups, the most impactful AI projects seem impossible at the beginning, and only work as a result of perseverance and (sometimes absurd and obsessive) faith. A good example of this is Tesla’s controversial choice to remove LiDAR and HD Maps from their autonomous car perception pipeline: no one thought it would be possible at the time this decision was made, but the tremendous progress of AI since then shows that they may well succeed in this project. . What is the right balance between persistence and agility in AI? How can I execute an AI project in a way that: . Limits as much as possible the risk of failure? . | Makes me quickly realize when I’m going off-track? . | Ensures that if I DO solve the research risks, the rest will follow, and the project will have the expected impact? . | . In this blog post, I will discuss the 4 most important failure risks that I see in AI projects (problem fit, data fit, integration, and research), and will try to give concrete tips and methodology on how to mitigate them. . Risk #1: Problem Fit . . As explained in my previous post, one of the most important risks of failure of an AI project is to build a “Solution In Search of a Problem”. It can happen for many reasons: we may have been over-excited by a new paper or AI technique, and somehow managed to convince ourselves that it would solve our problem, or we may just have an incomplete understanding of the problem because we didn’t talk with the right people at the right time. . In my opinion, the easiest way to reduce this risk is to sit with the people who really feel this problem, and really understand the need. Product managers are in general the right people to have these conversations with, but if you can also access customers and salespeople, this is even better! Through these conversations, you will: . Validate the need for this project . | Design the ideal solution (detached from any technical constraints at first) . | Decide on the reasonable trade-offs that could be made to reduce the project’s risk while maintaining a reasonable value (in other words, the equivalent of a Minimum Viable Product) . | . Ideally, the output of these discussions should be a document with project goals, inputs, expected outputs, and constraints. . On a side note, all these discussions obviously require work and time from the people you’ll discuss with, so you may argue that they don’t have the time to “help you” with your project at such an early stage. I believe it’s actually the opposite: if the project solves a real pain point, they are actually also helping themselves. This time investment actually reduces the AI/problem fit risk much more than the output document itself, which will probably change 30 times anyway. Those people are in general the ones whose interests are the most easily aligned with the company’s core metrics, so if they think they are wasting their time, this is a huge red flag that this project may not be a good use of your time! Actually, even if they do accept investing time, pay attention to their body language, and signs of impatience, it may mean that you are wasting your time too… . Risk #2: Data Fit . We hear all the time that “AI is all about data”, but people often tend to focus on data quantity rather than quality (I’ll explain what I mean by quality). Of course, you cannot do much without a decent amount of data, but it’s usually less than people think (I’ve found that in many cases, ~1000 data points are enough to start getting results). On the other hand, data “accuracy” (how close is your data from the data you will encounter in production) and “variance” (how much variability is there in the data) are critical to success in AI projects. More specifically, you will need to have data (for training AND testing) that reflects as closely as possible the cases you want to handle in production (including corner cases), but which also contains enough variance so that the AI model can learn to extract the patterns that really matter in your data. . However, getting the perfect “data fit” for your problem in one iteration is an almost impossible task. This is why many AI teams are now adopting a new methodology called “Data-Centric AI”, where they basically try to remove as much as possible the friction to acquiring new data (using for example synthetic data). While the term has been popularized by Andrew Ng, most advanced companies in AI have been practicing this methodology for years now. My favourite implementation of this methodology is Tesla’s “Data Engine”, which is shown below. Actually, this topic is such a game-changer in the world of AI that I’ll probably dedicate a future blog post to it. . . Source: slide from Andrej Karpathy’s (Tesla’s Director of AI) presentation at Tesla 2019 Autonomy Day . Risk #3: Integration with Other Teams . . Plant a flag on the roadmap . For a long time, I’ve thought that AI projects should live disconnected from product roadmaps, because of their inherent risk. Indeed, since we never know when (or if at all) an AI project is going to succeed, how on earth could we put its output on a roadmap that will afterwards be presented to customers, the company’s board, or maybe even announced publicly?! My conviction was that no one should put an AI-powered feature or product on a roadmap until the project has removed all of the main execution risks. . The problem with that approach is that once the algorithmic risks (i.e. the AI part) are lifted, you still have a very long way to go before seeing the AI in production and delivering actual value: . Other teams don’t know much about your project, so they will suddenly need to deploy a lot of energy to both understand the problem, the solution that you built, and what you need exactly from them. . | You will also need these teams to change their plan, since deploying this feature was not initially on their roadmap. For example, you may need software development to deploy it, write tests, a QA team to check that it actually does what it should, etc… But they also had plans before you came, and no one likes to change their plans… . | The product team has probably committed to other features while you were developing this AI project, so they also won’t be very happy to delay their committed features to push yours. . | Most importantly, since your project did not appear on the roadmap, other teams may engage in structural changes while you develop, and suddenly make the deployment of your AI much harder. Worse, another team may have developed a work-around in the meantime, that may be much less effective than your solution, but will still be very difficult for you to replace. . | . It took me a long time to understand it, but I am now quite convinced that even AI teams should commit to “product” outputs. Yes, there is a risk of not delivering on your promises. Yes, that risk is high. But 1/ Every one who knows a bit about AI is aware of that risk, and 2/ putting an AI achievement on a roadmap before you know it’s feasible (the famous “fake it till’ you make it”) has a lot of advantages that I believe outweighs the risk of not delivering on your promises. Just to name a few: . It will force other teams to get familiar with your project, collaborate with you on it when needed, and invest time to design it properly with you. . | It will also encourage them to plan and allocate resources for the moment your AI solution will be ready. . | Most importantly, it will put a positive pressure on you to build something end-to-end. Maybe it won’t work perfectly, and maybe you won’t be super proud of it at the beginning. But it will hopefully already provide some value to the company, and have the immense advantage of being fully integrated. This will make your life much easier later on when you’ll need to justify 2 additional months of work for the next version (the one with the real fancy AI in it) of this feature. We AI applied scientists don’t work well under pressure, but I believe that the lack of commitment, deadlines and expected deliverables sometimes also hinders us, and it’s time to change that. To continue my beloved parallel with startups, I have often heard that the best companies sell their product before it exists. Why should it be different with AI projects? . | . . Plan interfaces with other teams . One of the biggest points of friction when pushing an AI model to production is integration with other parts of the system. Suddenly you need to have discussions with other teams about architecture: what is the exact format of your inputs/outputs? How will your algorithm be called? By whom? What parts run locally or on the cloud? etc… If you are lucky, these discussions will only generate some “adaptation” work of your algorithm in order to make it look exactly as it should. But if you’re less lucky, these questions may raise significant flaws in your system, and may require you to redesign it entirely. For example, you may assume that you will easily get a certain control or output from another component of the system, and realize later on that this level of output is actually something the other component cannot easily provide. A more obvious example is when your AI requires too much computational resources, and does not match the hardware constraints that you have in production. . Again, I believe the best way to reduce the integration risks is to have discussions with other teams at the beginning of your project on how this solution could be realistically integrated in the final product, which team should be responsible for what, etc… These discussions will also help the other teams involved in this project plan more precisely the resources they’ll need once your project gets more mature. . Risk #4: Research . The research risk is critical, because only you can reduce it. The research phase consists in breaking your problems into subproblems, and building algorithms to solve each of them. Unfortunately, both of those tasks could be very hard, and this is where you’ll get to express all your AI and research talent. Exciting and scary at the same time right? Even though there is unfortunately no magic formula here, below are a few tips from my experience to help alleviate the risks involved with a problem or subproblem. . Connect the dots backwards . . If your AI pipeline is split into several parts, you should start by solving the LAST part, and then progress backwards in the pipeline to solve each block. This may seem counterintuitive at first sight, but there are two simple reasons behind this principle: . You will be able to check early on that your outputs are acceptable in terms of format, quality, etc… . | You will naturally generate accurate specs for the previous blocks in your pipeline. . | For example, let’s say you want to build an AI that recognizes a very small object in images. You may decide to first apply a super-resolution algorithm to your input picture, in order to recognize the object more easily afterwards. But how big should the picture be? What is the required quality for this algorithm? These are questions you can only answer by first developing the recognition block first. . Look at things from a different angle . . Sometimes, we can solve a problem by looking at it from a different and original perspective, typically by mathematically modeling things differently. For example, we can represent a surface quite naturally as a set of connected points in 3D (polygon mesh), but we could also represent it as the 0 level set of a very smooth function of the 3D space f(x,y,z) = distance (potentially signed) of the point (x,y,z) to this surface. This representation was one of the core ideas behind the paper Kinect Fusion, one of the most impactful papers in the world of 3D scanning and localization. This representation inspired the more recent breakthrough paper NeRF (although their representation is a bit different), which is able to render very realistic new views of a scene from several input views. . Map research risks to release versions . Once you have an initial assessment of the research risks involved in your project, try to sit again with the product team, and map them into a roadmap of feature releases. Ideally, you’d like to get to something like this: . v1 (Minimum Viable) v2 (creates significant value) v3 (Super-great amazing holy grail release) . AI/Market Fit | Required | Required | Required | . Integration | Required | Required | Required | . Feature #1 (Research Risk #1) | Required | Required | Required | . Feature #2 (Research Risk #2) | Not required | Required | Required | . Feature #3 (Research Risk #3) | Not required | Not required | Required | . Feature #4 (Research Risk #4) | Not required | Not required | Required | . Make sure you do not have more than 1 strong research risk before you get to a first product release. Indeed, if you have 10% chances to solve a risky problem in general, then you only have 1% chance to solve two risky AI problems in a row, so it’s most likely an unreasonable investment of your time. . Conclusion: should I pivot or persist? . Throughout this blog post, we’ve seen several ways to limit the risks of failure in AI, or at least make sure it happens as fast as possible when it’s inevitable. In particular, we’ve seen that many risks are not just technical but also business-related and organizational. However, the hardest question still remains: how do I know when to keep on trying, and when to change course in an AI project? . Here again, the same question holds for startups, but this time, we have a big advantage in AI over startups: our field is full of mathematics and modelisation. Now is the time to use them! Try to model mathematically your problems and subproblems, convince yourself theoretically or experimentally that something is feasible, or on the contrary try to find counterexamples when you feel your “proof” gets stuck. Simplify your problem into smaller ones that look solvable, and check that you can actually solve it. Try to break the problem into smaller pieces until you find the core resisting piece(s). Finally analyze (maybe even prove) WHY this piece is resisting, and what was the assumption you made there that turned out wrong. This “debug” process may help you make the right decision, but it may also actually help you find the key that you were missing to make your AI project work! .",
            "url": "https://sebderhy.github.io/impactfulai/2021/12/06/Risk-Management.html",
            "relUrl": "/2021/12/06/Risk-Management.html",
            "date": " • Dec 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fall In Love With The Problem, Not The Solution",
            "content": ". (A big thanks to Elodie Tordjman from Smart-content for her great advice on this blog post) . Have you ever been given a task/project starting with: “Wouldn’t it be great if we had capability X? It would be a game-changer in so many aspects for our company!”. While this sounds like a very positive and energizing task, I’ve become more and more skeptical over the years of such tasks, because they lead you to build a “Solution In Search of a Problem”, a term popularized by Y Combinator to describe one of the most common startup pitfalls: . “The third mistake is to start with a solution instead of a problem. […] We see this so commonly at YC that we have a term for it. It’s called a “Solution In Search of a Problem,” or a SISP. And these are usually not great, because usually, you never actually find the problem. You’re much better off starting with a problem, and then looking for solutions.” . I’ll argue that what is true for a startup is actually also very true for AI algorithms. Actually, even if a task is properly defined as a problem, we often tend to jump on building a solution, rather than investigating the pain point, simply because it is our comfort zone: after all, we’ve all been trained and hired for our “problem-solving” skills right? Who wants to have a “problem-digger”? . This post will be divided into 2 parts: . How this SISP trend materializes in the AI world (both academic and industrial). . | 7 practical tips to make sure your AI solution stays focused on solving a real and meaningful problem. . | Examples from the real world - it happens more than you’d think! . An example from the industry . . In 2011, Microsoft released a consumer gaming accessory called Kinect that enabled people to play by moving freely in front of their camera. In addition to being a huge commercial success, it was also a very hard technological achievement. The Kinect team not only managed to build a brilliant gesture recognition algorithm, but also made a huge hardware achievement: in order to provide a truly seamless experience, Microsoft realized that they would need a special type of camera, called “depth camera” (a camera able to estimate the 3D location of each pixel). They found a way to miniaturize them, make them much cheaper, and manufacture them at scale, partnering with an Israeli startup called Primesense, which was later acquired by Apple in a surprising turn of events. Kinect is in my opinion the perfect example of a problem-driven technological breakthrough, and this is in my opinion why it was so successful. . However, as is very often the case, this technological achievement somehow gave birth to many solution-driven technological failures. Suddenly, other big companies realized that these cameras were able to achieve what regular cameras couldn’t and that these cameras would “open doors to many amazing new applications for smartphone and tablet cameras”. Google opened a project called Tango, Intel a project called RealSense, and Apple acquired Primesense. . Fast-forward 10 years later, what happened to these projects? Well, the results are unfortunately not brilliant. Google managed to manufacture a few devices, but didn’t achieve any commercial success with Tango, and shut down the program. Intel manufactured a few RealSense products, built a lot of software, but finally didn’t reach any meaningful commercial success and recently announced that they will be shutting down their RealSense department. Apple did achieve commercial success with iPhones and iPad equipped with depth cameras, but it’s hard to tell whether they ever found a “killer-app” for depth cameras. My guess is that currently, the most important use-case of the iPhone’s depth camera is FaceID, which allows you to unlock your smartphone with your face. And yes, FaceID is cool, but will it be remembered as a game-changing technology? Is it really much more robust than fingerprint-based or regular-camera-based identification? . An example from the academy . In 2017, some researchers from Google introduced the Transformers architecture, and it was a huge breakthrough in the world of NLP/NLU (Natural Language Processing/Understanding) because it enabled a dramatic performance boost on almost every language-related AI task. But exactly like in my previous examples, after the seminal paper introducing Transformers, many people tried to apply Transformers to other domains, and in particular computer vision, and even managed to show some slight improvements on ImageNet classification. However, in computer vision, we already have an architecture that works really well: Convolutional Neural Networks (CNN). Actually, an amazing recent paper called “ResNet Strikes back” proved that the most trivial CNN architecture can reach the same level of performance as Transformer-based architectures if they are trained correctly. Of course, this doesn’t mean that transformer will never be useful for images, but why not rather spend time to leverage transformers in much harder AI problems where CNNs do not work well, such as audio processing, geometric deep learning, few-shots classification, 3D mesh processing, etc…? . That being said, I have to admit that I’m being a bit unfair with the AI academic world. Maybe academic research SHOULD be solution-driven and not problem-driven. Some problems in the world are so hard to fix that the only way to solve them is by trying lots of things and “connecting the dots backward” (as Steve Jobs famously said). The world obviously needs some solution-driven research to accomplish great things, but people engaging in this path should be aware that their impact will at best be in the long run, at worst be null. . 7 tips to make sure you are building a problem-driven AI . Get business insights about the problem . . Whenever you receive a task, it is very likely that the person giving you the task (e.g. an Algorithm Team Lead) is not the real source of the task. More likely, they heard from other people in the company about a painful problem that needs to be addressed and thought it could be a good fit for your skills. . Therefore, your first goal should be to become the most knowledgeable person about this problem: go and talk to the people that really FEEL the pain. Very often, this should involve talking to customers, but if it’s difficult for any reason, try to at least ask as much about it to your Product Manager, or customer-facing people. In particular, I recommend this user interview framework from Startup School when trying to understand a problem: . What’s the hardest part about the problem? . | Tell me about the last time you found this problem? . | Why was that hard? . | What, if anything, have you done to try to solve this problem? . | What are the issues with the solutions you’ve tried? . | . Another famous and in my opinion very efficient framework to understand the root cause of a problem is to ask the 5 whys. This will really help you get to the core reasons behind your problem, and I found that it can be particularly helpful later on when you’ll need to find creative solutions to solve the problem. . Check that the problem is correctly prioritized . Once you understand the problem, try to get a very rough sense of its worth. How often does the company lose a deal because of this? How much engineering time would be saved if it were solved? How important is this problem compared to others that you could work on? . This is actually a very tricky part. First, because prioritization requires having the big picture, and this is something you don’t always have. In addition, as an AI scientist, you usually don’t have the luxury to decide whether a task should or should not be prioritized. However, you should always have the ability (it’s even a duty!) to discuss with the person that gave you this task, and try to change their mind if you don’t agree with them. Making correct prioritization is probably one of the toughest job leaders have, so help them be better at their job: they will appreciate it, and you will avoid working in vain. I’ve seen too many AI scientists making amazing solutions that never made it to production because they turned out not to be so important in the end, and hence the deployment task never got prioritized. . Prove that this problem really requires you . . Especially if you’ve done the 5 whys exercise, you should now see the deep root causes of the problem you are trying to solve. At that point, you may realize that the main problem might be solved by something very different from what you’ve been originally told. It could potentially be anything: a different marketing strategy, a better internal process, or simply the integration of some external software. . The most frequent example is when you find a third-party company that already offers a product that solves your problem. Of course, it will cost money, but unless the third-party company has a VERY bad pricing strategy, this solution should be a better deal than building it in-house from scratch. So before you start writing a single line of code, make sure that you’ve done serious market research, and that a commercial product suiting your needs does not already exist. . Build a good evaluation pipeline . If you’ve done your research correctly on the problem understanding part, you should already have a good idea of what an ideal solution looks like. You may even have a few brilliant ideas on how to tackle the problem. However, it is very important that you refrain from coding your brilliant solution, otherwise, you’ll have no idea how good it is, and unfortunately, no one will be convinced that it works just because it comes from your brilliant mind, or because it is based on the latest CVPR award-winning paper. . At this stage, you should design a robust and informative way to evaluate any solution to the problem you’re solving: . Quantitative performance tests: metrics that really characterize how good your solution is. In general, one needs to define several metrics that are anti-correlated, such that it is very hard to increase one without hurting the other. . | Qualitative performance tests: even though it’s important to define the algorithm’s quality through clear metrics, these metrics need in general to be complemented with human-based judgment. For example, if you are building an AI that generates images, and want to evaluate how good-looking these images are, you can use metrics such as FID or PPL, but at some point, someone will have to take a look at them (spoiler: most of the time, YOU will have to!!). . | Divide the performance tests above into test sets that . Represents as faithfully as possible the data you’ll have in production . | Help you find your solution’s strengths and weaknesses before being deployed . | . | . Needless to say that the process to test a given solution and visualize its results should be as straightforward and convenient as possible (one push button, ideally). It will save you a lot of precious time later when you’ll need to iterate. On this topic, I highly recommend tools such as Tensorboard and Weights &amp; Biases for tracking machine learning results, or QA-Board for more generic algo projects (QA-Board has in particular an amazing image comparison tech). You may also want to use tools such as Kubeflow that enable you to manage and run many machine learning experiments in parallel. I’ll probably make a separate blog post on MLOps, so that we can dive more into those tools and the pain points they solve. . Interestingly, this idea that one should write problem-defining tests before coding the solution that will pass those tests is very famous and widely adopted in the world of software development. It’s called test-driven development, and Robert Martin (Uncle Bob) has a wonderful presentation on this topic. For some reason, its adoption in the world of AI is still relatively low. . Think big, start small . . One of the previous companies I worked for (Via Transportation) had this amazing sentence from the marketing genius Seth Godin written on their walls to motivate R &amp;D teams. They wanted to encourage employees to aim high in their projects, but also be able to quickly make a step that would move the company forward. . Now that you’ve set up a great testing environment, your next step is to build a baseline, i.e. the SIMPLEST algorithm you can write in your test environment that will get you ANY performance score (yes, this score does need to be great). Don’t try to be too sophisticated there, the goal is to have something to compare to, and to get some convincing evidence that the complicated algorithm you will build next really has to be complicated. . Iterate fast . . Once you have a baseline and a good evaluation environment, the algo fun can finally begin! This is the place where your research talent comes most into play: read papers, get interesting insights about the data and your problem, implement things, etc… However, keep in mind that it’s not just about being smart, but also being able to iterate fast. Here again, the resemblance with startups is stunning: because of the very uncertain environment of algorithmic research, it is often VERY worth spending time on the iteration speed process rather than figuring out the next thing you want to try. Typically, it is in general a bad idea to train a network for 7 days if you have no idea whether it’s going to work in the end. . My former boss at Samsung Nathan Levy gave me a great rule of thumb to decide when to invest in iteration speed vs implementing your next idea: whenever you find yourself waiting for something to finish (e.g. a network is training), you may need to focus this waiting time on accelerating your development cycle (e.g. improve the runtime of a bottleneck function), rather than working on your next algorithmic move. . Move to prod as fast as possible . . Ok, so you’ve finally got your first good-enough algorithm, but at this stage, chances are you’re still not satisfied… There are so many things you haven’t optimized yet! So many other ideas you’d like to experiment! But this is also where you need the discipline to focus on your problem (the one you fell in love with, remember :)?). Even though your algorithm seems pretty basic and very improvable, you should try to push it to production as soon as possible, since it is probably already better than what exists today. . The reasons for this are: . The process to move things to prod is slow and painful. You’ll probably have plenty of time to improve your algorithm during the deployment process, and in most cases, you will be able to update your model/code without problems. . | The process of deploying will likely teach you a lot about the constraints your solution needs to fit in, and you might suddenly realize that some key performance aspect of your algorithm was not properly taken into account by your evaluation metrics/pipeline: in other words, you’re back to step 4 ;-). . | Once you’ve made the full cycle of moving to prod, you should be able to iterate and deploy improvements on a regular basis. This will make your work much more visible, and if you care about the problem you’re solving, you’ll feel great that your work actually makes someone else’s life better. . | Conclusion - Wait, is this really my job?!! . You may have noticed that most of the tips in this article don’t require reading lots of papers, implementing super-fancy-math-based AI algorithms, etc… So I think that it’s important for me to clarify a few things. . I didn’t write a lot about step #6 (will probably explain more about fast iteration in a future post), but it is probably the hardest, longest, and most uncertain part of an AI development process, so in practice, you can expect to spend a significant time on researching a good solution for your problem. But don’t forget the other steps! . | In some organizations, other people (e.g. product managers) will perform steps 1 to 3, so that you can focus on others that require more coding. Therefore, if you only want to code, some organizations may help you do that. . | That being said, let’s face the ugly truth: real-life impactful AI is not academic research, and it’s not even a Kaggle competition. If you are intrinsically motivated by the value you’re creating for the world, and the cause you are helping move forward, you’ll eventually thrive, be recognized for your work, and find huge satisfaction in seeing the impact of your work. On the other hand, if you only want to do the fun and interesting parts of AI, read and write papers or learn new technical skills, you are probably better off doing academic research, which by the way is also a great path that I highly respect. It’s just a different one! . |",
            "url": "https://sebderhy.github.io/impactfulai/2021/11/01/Fall-in-love-with-the-problem,-not-the-solution.html",
            "relUrl": "/2021/11/01/Fall-in-love-with-the-problem,-not-the-solution.html",
            "date": " • Nov 1, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Why This Blog",
            "content": "Over the last 10 years, I’ve realized that applied research (and more specifically AI) is a double-edged sword. On the one hand, it can help you solve incredibly complex problems, and create an insane Return-On-Investment for companies. But on the other hand, according to a Venturebeat article (based on a Gartner report), only 20% of AI projects ever get deployed to production, and among those, only 40% are profitable! Unfortunately, these figures do not surprise me, as I’ve seen countless algorithmic and machine learning projects fail in my career. . I created this blog in order to analyze the reasons behind such failures, share experiences (mine and others’), and generate discussions that could eventually help maximize the impact of AI research in the real world. . Learning from the Startup World . In this blog, I will often tackle the questions raised above with an innovative angle: adapt lessons from the startup world to the AI conceptual world. Indeed, although we often hear about how startups can leverage AI to improve their business, no one to my knowledge took the opposite angle and explored how to leverage the widely studied and experienced startup world to improve AI’s impact on the world. . This idea may sound very weird at first sight, but anyone who looks closely at those two systems will be stricken by their similarities: a high risk of failure, an uncertain environment, the need for agility and speed, the urge to convince many stakeholders and align their interests, the necessity to find harmony between tech and business, … . Last but not least, the similarities between those 2 worlds particularly resonate with me, since I have been a VC investor and founder in the past, invested myself in a few startups, and generally spend a lot of time discussing and working with entrepreneurs. . Who is this blog for? . At a high level, this blog is for people that - like me - believe that AI’s impact should be much larger than it is today. More specifically, I think 3 types of people can learn from this blog: . Applied researchers like myself, who love reading papers and solving hard technical problems, but who are more motivated by their actual impact than their salary or implementing the latest cool AI paper (who said GAN ;-)?). . | Entrepreneurs and leaders, technical or not, on questions such as: “what to look for when recruiting?”, “what kind of ML infrastructure will make my teams most effective?”, “When to know when to stop an AI project”, etc… . | Investors or future entrepreneurs, on questions like “what are the problems in the world of AI today”, “who is tackling them and how”, etc… . | . Terminology . There are many close terminologies in the world of AI, and you will notice that I often use terms such as Artificial Intelligence, Data Science, Algorithms, Applied Research in an interchangeable manner… Some people may tell you that they are very different (I personally don’t think so), and there are many debates about differences between those fields. However, the truth is that in our case, the terminology doesn’t make such a difference, because they all relate to the same problem: how to handle risky projects that can have a huge impact, but whose results are quite unpredictable, and can often also very easily fail. Again, you can see here why I believe startups can teach us a lot on those projects. .",
            "url": "https://sebderhy.github.io/impactfulai/2021/10/22/Why-This-Blog.html",
            "relUrl": "/2021/10/22/Why-This-Blog.html",
            "date": " • Oct 22, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". My name is Sebastien Derhy, I am originally from France (Paris), but live in Tel-Aviv since July 2014. I’ve always been passionate about the intersection between technology (in particular deep learning and computer vision), research, and business. This is one of the reasons creating this blog was so important to me. . I am currently leading Algorithms at Datagen, a startup helping computer vision scientists work seamlessly in a data-centric R&amp;D cycle using synthetic data. . My past experiences include: . Navigation Intelligence Team Leader at Via Transportation | Algorithm Team Leader at Samsung Israel Research Center | COO &amp; Co-founder of Fitterli, a startup that aimed at leveraging depth cameras in smartphones for online shopping | VC at Elaia Partners, one of the leading European VCs, first investors of several French unicorns: Criteo (NASDAQ: , CRTO), Shift Technology, and Mirakl. | Visiting Researcher at the Technion, where I worked at the GIP lab under the supervision of Ron Kimmel on a Gesture-based Tetris game. | . I hold an MSc in Applied Mathematics from Ecole Polytechnique and an MSc in Entrepreneurship from HEC. .",
          "url": "https://sebderhy.github.io/impactfulai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sebderhy.github.io/impactfulai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}